"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.nativeEvent = exports.isUneedWebView = exports.batch = void 0;
var native_1 = require("./native");
Object.defineProperty(exports, "batch", { enumerable: true, get: function () { return native_1.batch; } });
var win = typeof window === 'undefined' ? {} : window;
var isAndroid = win.androidBridge || /UNWebView\/android/.test(win.navigator && win.navigator.userAgent);
exports.isUneedWebView = win.isUneedWebView ||
    (win.navigator && win.navigator.userAgent && win.navigator.userAgent.indexOf('UneedWebView') !== -1);
var WebViewNative = /** @class */ (function (_super) {
    __extends(WebViewNative, _super);
    function WebViewNative() {
        var _this = _super.call(this) || this;
        // Native调用这些方法
        var originOnNativeMessage = win.onNativeMessage;
        win.onNativeMessage = function (data) {
            if (originOnNativeMessage) {
                if (originOnNativeMessage(data)) {
                    return;
                }
            }
            _this.handleNativeResponse(data);
        };
        win.onNativeEvent = function (event, data) { return _this.handleNativeEvent(event, data); };
        win.onModuleEvent = function (module, event, data) { return _this.handleModuleEvent(module, event, data); };
        win.callJS = function (message) { return _this.callJS(message); };
        if (!win.jsbridgeCallNative &&
            !isAndroid &&
            !(win.webkit && win.webkit.messageHandlers) &&
            !win.UIWebViewJSBridge) {
            win.addEventListener('message', function (event) {
                if (event && event.data && event.data.type == 'jsbridge.result') {
                    win.onNativeMessage(event.data.data);
                }
            });
        }
        return _this;
    }
    WebViewNative.prototype.isAndroid = function () {
        return isAndroid;
    };
    WebViewNative.prototype.callNativeInternal = function (data) {
        if (win.jsbridgeCallNative) {
            return win.jsbridgeCallNative(data);
        }
        if (isAndroid) {
            var messageStr = JSON.stringify(data);
            return win.androidBridge.exec(messageStr);
        }
        else {
            // WKWebView
            if (win.webkit && win.webkit.messageHandlers) {
                return win.webkit.messageHandlers.defaultHandler.postMessage(data);
            }
            // UIWebView
            else {
                if (win.UIWebViewJSBridge) {
                    return win.UIWebViewJSBridge.callNative(JSON.stringify(data));
                }
                else {
                    // chrome调试插件
                    if (win.chrome && win.chrome.runtime && win.postMessage) {
                        win.postMessage({
                            type: 'jsbridge.call',
                            data: data
                        });
                    }
                }
            }
        }
    };
    WebViewNative.prototype.callNativeInternalSync = function (data) { };
    return WebViewNative;
}(native_1.Native));
var native = new WebViewNative();
exports.nativeEvent = native.nativeEvent;
native_1.setNativeImplement(native);
