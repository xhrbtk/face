import { EventEmitter } from 'eventemitter3';
export declare function setNativeImplement(native: Native): void;
export declare function addJSModule(id: string, module: any): void;
export interface INativeCallData {
    handleId?: string;
    module: string;
    method: string;
    args: any;
}
export interface INativeResponse {
    handleId: string;
    ec: number;
    em?: string;
    data?: any;
}
export declare function batch(builder: (jsb: any) => any): Promise<INativeResponse>;
export declare abstract class Native {
    readonly nativeEvent: import("eventemitter3")<string | symbol, any>;
    private _idSeed;
    private _handles;
    private _jsModules;
    private _genHandleId;
    constructor();
    abstract isAndroid(): boolean;
    callNative(data: INativeCallData): Promise<INativeResponse>;
    callNativeFlat(module: string, method: string, args?: any): Promise<INativeResponse>;
    callNativeSync(module: string, method: string, args?: any): any;
    callJS(message: {
        handleId: string;
        module: string;
        method: string;
        args: any;
    }): void;
    addJSModule(id: string, module: any): void;
    handleNativeResponse(message: INativeResponse): void;
    handleNativeEvent(event: string, data: any): void;
    handleModuleEvent(module: string, event: string, data: any): void;
    protected abstract callNativeInternal(data: INativeCallData): void;
    protected abstract callNativeInternalSync(data: INativeCallData): any;
}
export declare class ModuleBase extends EventEmitter {
    get native(): Native;
}
