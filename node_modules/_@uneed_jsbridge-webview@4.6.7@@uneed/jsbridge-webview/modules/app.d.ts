import { INativeResponse, ModuleBase } from '../native';
interface ShareLocationParams {
    cvsId: String;
    chatletType: String;
    isOpen: Boolean;
    cvsType?: number;
    data?: any;
}
interface updateInfo {
    type: number;
    content: string;
}
interface IShareInfo {
    title?: string;
    message?: string;
    url: string;
    thumbImageUrl?: string;
    share_key: string;
    isResponse?: boolean;
    platform?: number;
}
interface displayName {
    cvsid: string;
    cvsType: string;
    uids: Array<string>;
}
interface WardInfo {
    maxLength?: number;
    include?: Array<string>;
    exclude?: Array<string>;
    type?: number;
    gid?: string;
    title?: string;
    multiple?: boolean;
    button?: string;
    icon?: string;
    desc?: string;
    defaultSelected?: Array<string>;
}
interface TvInfo {
    url?: string;
    currentTime?: number;
}
interface fileInfo {
    root: string;
    filePath: string;
    url: string;
    fileName: string;
    size: string;
    contentType?: string;
    id?: string;
}
interface DownloadArg {
    url: string;
    desc?: string;
    headers?: any;
    filename?: string;
    contenttype?: string;
    cover?: string;
    duration?: Number;
}
interface DownloadInfo {
    type: Number;
    args: DownloadArg[];
    albumid?: String;
    fpid?: String;
    dir?: String;
}
interface File {
    file_name: string;
    content_type: string;
    full_url: string;
    thumb_url: string;
    preview_url: string;
    origin_url: string;
    file_size: number;
    width: number;
    height: number;
    duration: number;
    labels: any;
    rotate: any;
}
interface shareOthersJson {
    files: Array<File>;
    albumid: string;
}
declare class AppModule extends ModuleBase {
    stopCatch(params: {
        catchPost: boolean;
    }): Promise<INativeResponse>;
    getAppUA(): Promise<INativeResponse>;
    getAppUASync(): string;
    versionGTE(version: string): Promise<boolean>;
    getClipBoardContent(): Promise<INativeResponse>;
    getProfile(uids: Array<string>, gids?: Array<string>, type?: string): Promise<INativeResponse>;
    setClipBoardContent(data: {
        content: string;
    }): Promise<INativeResponse>;
    getDeviceInfo(): Promise<INativeResponse>;
    getNetwork(): Promise<INativeResponse>;
    getNetworkSync(): any;
    scan(): Promise<INativeResponse>;
    getUserInfo(): Promise<INativeResponse>;
    updateUserInfo(): void;
    getDisplayName(params: displayName): Promise<INativeResponse>;
    getStepNum(): Promise<INativeResponse>;
    getLocation(): Promise<INativeResponse>;
    shareLocation(params: ShareLocationParams): Promise<INativeResponse>;
    sharePrivateLocation(params: {
        query: boolean;
        isOpen?: boolean;
    } | any): Promise<INativeResponse>;
    openScheme(url: string): Promise<INativeResponse>;
    openSelectPoi(geo?: {
        lng: number;
        lat: number;
    }): Promise<INativeResponse>;
    openSelectTV(params: TvInfo): Promise<INativeResponse>;
    openFilePage(params: fileInfo): Promise<INativeResponse>;
    getPackageManifest(id: string): Promise<INativeResponse>;
    selectCity(): Promise<INativeResponse>;
    selectHometown(): Promise<INativeResponse>;
    openSelectAlbum(params: {
        mode?: string;
    } | any): Promise<INativeResponse>;
    openSelectCloud(params: any): Promise<INativeResponse>;
    createGroup(): Promise<INativeResponse>;
    getUserProfile(uid: string, type?: string): Promise<INativeResponse>;
    refreshUserProfile(uids: Array<string>, type: string): Promise<INativeResponse>;
    getGroupProfile(gid: string): Promise<INativeResponse>;
    shareImage(filePath: string): Promise<INativeResponse>;
    share(params: IShareInfo): Promise<INativeResponse>;
    shareCard(params: {
        id: string;
    } | any): Promise<INativeResponse>;
    systemShare(params: {
        localFilePath: string;
    }): Promise<INativeResponse>;
    openForward(params?: WardInfo | any): Promise<INativeResponse>;
    openSelectCvs(params?: WardInfo | any): Promise<INativeResponse>;
    selectGroupMember(params?: WardInfo | any): Promise<INativeResponse>;
    showAddFriendPanel(params: {
        uid: string;
        source: string;
    }): Promise<INativeResponse>;
    checkUpdate(): Promise<INativeResponse>;
    bindThirdPart(data: {
        type: string;
    }): Promise<INativeResponse>;
    updateNativeInfo(data?: updateInfo | any): Promise<INativeResponse>;
    getRom(): Promise<INativeResponse>;
    createPdf(urls: Array<any>): Promise<INativeResponse>;
    appEnv(): Promise<INativeResponse>;
    getThemeModel(): Promise<INativeResponse>;
    download(params: DownloadInfo): Promise<INativeResponse>;
    toTransferQueue(params: {
        type?: Number;
    }): Promise<INativeResponse>;
    getUserName(uid: string): Promise<INativeResponse>;
    shareWithOthers(json: shareOthersJson): Promise<INativeResponse>;
}
export declare const App: AppModule;
export {};
