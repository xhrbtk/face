"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Page = void 0;
var native_1 = require("../native");
var PageModule = /** @class */ (function (_super) {
    __extends(PageModule, _super);
    function PageModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PageModule.prototype.setTitle = function (title) {
        if (this.native.isAndroid()) {
            if (typeof document != 'undefined') {
                document.title = title;
            }
        }
        else {
            this.native.callNative({
                module: 'Page',
                method: 'setTitle',
                args: { title: title },
            });
        }
    };
    PageModule.prototype.setScreenCapture = function (screenCaptureBol) {
        return this.native.callNative({
            module: 'Page',
            method: 'setScreenCapture',
            args: {
                screenCaptureBol: screenCaptureBol,
            }
        });
    };
    PageModule.prototype.getData = function (key) {
        return this.native.callNative({
            module: 'Page',
            method: 'getData',
            args: key,
        });
    };
    PageModule.prototype.closeByLabel = function (params) {
        this.native.callNative({
            module: 'Page',
            method: 'closeByLabel',
            args: params,
        });
    };
    PageModule.prototype.setLabel = function (label) {
        this.native.callNative({
            module: 'Page',
            method: 'setLabel',
            args: { label: label },
        });
    };
    PageModule.prototype.close = function () {
        this.native.callNative({
            module: 'Page',
            method: 'close',
            args: {},
        });
    };
    PageModule.prototype.setInterceptBack = function (alive) {
        if (alive === void 0) { alive = true; }
        this.native.callNative({
            module: 'Page',
            method: 'setInterceptBack',
            args: { intercept: alive },
        });
    };
    /**
     * @type 'preset' | 'push'，默认'push' 从一侧打开
     */
    PageModule.prototype.navigateTo = function (params) {
        this.native.callNative({
            module: 'Page',
            method: 'navigateTo',
            args: params,
        });
    };
    PageModule.prototype.navigateForward = function (params, cb) {
        if (cb) {
            this.once('page.result', cb);
        }
        this.navigateTo(params);
    };
    // 通过参数传过来一个对象，该对象会被返回到page.result事件的回调上函数上
    PageModule.prototype.setResult = function (data) {
        this.native.callNativeFlat('Page', 'setResult', data);
    };
    PageModule.prototype.openLink = function (params) {
        // 打开一个外部链接
        // openWithWebview 如果为true 使用客户端自己的webview打开链接 如果为false 则使用yuni-browser打开链接
        this.native.callNative({
            module: 'Page',
            method: 'openLink',
            args: params,
        });
    };
    PageModule.prototype.popup = function (params) {
        if (!params.data) {
            params.data = {};
        }
        this.native.callNative({
            module: 'Page',
            method: 'popup',
            args: params,
        });
    };
    PageModule.prototype.ready = function () {
        this.native.callNative({
            module: 'Page',
            method: 'ready',
            args: {},
        });
    };
    PageModule.prototype.captureToSendChatMsg = function () {
        this.native.callNative({
            module: 'Page',
            method: 'captureToSendChatMsg',
            args: {},
        });
    };
    PageModule.prototype.navBtn = function (buttons) {
        return this.native.callNative({
            module: 'Page',
            method: 'navBtn',
            args: buttons,
        });
    };
    PageModule.prototype.miniProgramShare = function () {
        this.native.callNative({
            module: 'Page',
            method: 'miniProgramShare',
            args: {},
        });
    };
    return PageModule;
}(native_1.ModuleBase));
exports.Page = new PageModule();
native_1.addJSModule('Page', exports.Page);
