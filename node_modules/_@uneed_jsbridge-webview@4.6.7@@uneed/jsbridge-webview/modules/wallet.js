"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Wallet = void 0;
var native_1 = require("../native");
var WalletModule = /** @class */ (function (_super) {
    __extends(WalletModule, _super);
    function WalletModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //目前
    WalletModule.prototype.callPay = function (params) {
        return this.native.callNative({
            module: 'Wallet',
            method: 'callPay',
            args: params,
        });
    };
    WalletModule.prototype.query = function () {
        return this.native.callNative({
            module: 'Wallet',
            method: 'query',
            args: {},
        });
    };
    WalletModule.prototype.topup = function (money) {
        return this.native.callNative({
            module: 'Wallet',
            method: 'topup',
            args: {
                money: money,
            },
        });
    };
    WalletModule.prototype.withdraw = function (params) {
        return this.native.callNative({
            module: 'Wallet',
            method: 'withdraw',
            args: params,
        });
    };
    WalletModule.prototype.setPassword = function (params) {
        return this.native.callNative({
            module: 'Wallet',
            method: 'setPassword',
            args: params,
        });
    };
    WalletModule.prototype.bindWithdrawAccount = function (params) {
        return this.native.callNative({
            module: 'Wallet',
            method: 'bindWithdrawAccount',
            args: params,
        });
    };
    return WalletModule;
}(native_1.ModuleBase));
exports.Wallet = new WalletModule();
native_1.addJSModule('Wallet', exports.Wallet);
