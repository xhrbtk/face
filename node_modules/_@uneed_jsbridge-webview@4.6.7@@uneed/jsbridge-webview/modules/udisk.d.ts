import { INativeResponse, ModuleBase } from '../native';
interface fileHandleParam {
    root?: string;
    from: string;
    to: string;
    delete?: boolean;
}
interface fileParam {
    path: string;
    root?: string;
}
interface albumParam {
    path?: string;
    root?: string;
    albumid: string;
}
interface cloudParam {
    paths: Array<string>;
    root?: string;
    site: string;
}
declare class UdiskModule extends ModuleBase {
    getWifiInfo(): Promise<INativeResponse>;
    disconnect(params: {
        root: string;
    } | any): Promise<INativeResponse>;
    getServerInfo(params: string | object): Promise<INativeResponse>;
    genToken(params: {
        root: string;
        device: any;
    }): Promise<INativeResponse>;
    list(params: fileParam): Promise<INativeResponse>;
    info(params: string | object): Promise<INativeResponse>;
    fileinfo(params: fileParam): Promise<INativeResponse>;
    fileContent(params: fileParam): Promise<INativeResponse>;
    preview(params: fileParam): Promise<INativeResponse>;
    getAbsolutePath(params: fileParam): Promise<INativeResponse>;
    mkdir(params: fileParam): Promise<INativeResponse>;
    delete(params: fileParam): Promise<INativeResponse>;
    rename(params: fileHandleParam): Promise<INativeResponse>;
    move(params: fileHandleParam): Promise<INativeResponse>;
    copy(params: fileHandleParam): Promise<INativeResponse>;
    importFromPhotos(params: fileHandleParam): Promise<INativeResponse>;
    importFromSystem(params: fileHandleParam): Promise<INativeResponse>;
    exportToSystem(params: fileHandleParam): Promise<INativeResponse>;
    uploadToAlbum(params: albumParam): Promise<INativeResponse>;
    uploadToCloud(params: cloudParam): Promise<INativeResponse>;
    playFile(params: {
        audioObject: object;
        root: String;
    }): Promise<INativeResponse>;
}
export declare const UDisk: UdiskModule;
export {};
