"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModuleBase = exports.Native = exports.batch = exports.addJSModule = exports.setNativeImplement = void 0;
var eventemitter3_1 = require("eventemitter3");
var _nativeImpl;
var _modules = {};
function setNativeImplement(native) {
    _nativeImpl = native;
    if (typeof global !== 'undefined') {
        global['JSBridge'] = _modules;
    }
    if (typeof window !== 'undefined') {
        window['JSBridge'] = _modules;
    }
}
exports.setNativeImplement = setNativeImplement;
function getNative() {
    return _nativeImpl;
}
function addJSModule(id, module) {
    _modules[id] = module;
}
exports.addJSModule = addJSModule;
function batch(builder) {
    var allResponse = { handleId: null, ec: 200, em: 'ok', data: {} };
    var callParams = builder(_modules);
    var promises = [];
    var _loop_1 = function (key) {
        var promise = callParams[key];
        promise
            .then(function (resp) {
            allResponse.data[key] = resp;
        })
            .catch(function (resp) {
            allResponse.ec = (resp && resp.ec) || 400;
        });
        promises.push(promise);
    };
    for (var key in callParams) {
        _loop_1(key);
    }
    return Promise.all(promises).then(function () { return allResponse; });
}
exports.batch = batch;
var Native = /** @class */ (function () {
    function Native() {
        var _this = this;
        this.nativeEvent = new eventemitter3_1.EventEmitter();
        this._idSeed = 1;
        this._handles = {};
        this._jsModules = {};
        Object.keys(_modules).forEach(function (id) {
            var module = _modules[id];
            _this.addJSModule(id, module);
        });
    }
    Native.prototype._genHandleId = function () {
        return "BridgeHandle_" + this._idSeed++;
    };
    Native.prototype.callNative = function (data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var handleId = data.handleId || _this._genHandleId();
            _this._handles[handleId] = function (message) {
                if (message.ec === 200) {
                    resolve(message.data);
                }
                else {
                    reject(message);
                }
            };
            data.handleId = handleId;
            _this.callNativeInternal(data);
        });
    };
    Native.prototype.callNativeFlat = function (module, method, args) {
        return this.callNative({
            module: module,
            method: method,
            args: args || {},
        });
    };
    Native.prototype.callNativeSync = function (module, method, args) {
        return this.callNativeInternalSync({
            module: module,
            method: method,
            args: args,
        });
    };
    Native.prototype.callJS = function (message) {
        var _this = this;
        var result = this._jsModules[message.module][message.method](message.args);
        Promise.resolve(result).then(function (args) {
            _this.callNative({
                module: 'JSCallback',
                method: 'callback',
                handleId: message.handleId,
                args: args,
            });
        });
    };
    Native.prototype.addJSModule = function (id, module) {
        this._jsModules[id] = module;
    };
    Native.prototype.handleNativeResponse = function (message) {
        var callback = this._handles[message.handleId];
        if (callback) {
            delete this._handles[message.handleId];
            callback(message);
        }
    };
    Native.prototype.handleNativeEvent = function (event, data) {
        this.nativeEvent.emit(event, data);
    };
    Native.prototype.handleModuleEvent = function (module, event, data) {
        this._jsModules[module].emit(event, data);
    };
    return Native;
}());
exports.Native = Native;
var ModuleBase = /** @class */ (function (_super) {
    __extends(ModuleBase, _super);
    function ModuleBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ModuleBase.prototype, "native", {
        get: function () {
            return getNative();
        },
        enumerable: false,
        configurable: true
    });
    return ModuleBase;
}(eventemitter3_1.EventEmitter));
exports.ModuleBase = ModuleBase;
