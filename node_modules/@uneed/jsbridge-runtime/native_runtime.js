"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.nativeEvent = exports.batch = void 0;
var native_1 = require("./native");
Object.defineProperty(exports, "batch", { enumerable: true, get: function () { return native_1.batch; } });
var isAndroid = typeof JSRuntimeCallNative != 'undefined';
var RuntimeNative = /** @class */ (function (_super) {
    __extends(RuntimeNative, _super);
    function RuntimeNative() {
        var _this = _super.call(this) || this;
        // Native调用这些方法
        global.onNativeMessage = function (data) { return _this.handleNativeResponse(data); };
        global.onNativeEvent = function (event, data) { return _this.handleNativeEvent(event, data); };
        global.onModuleEvent = function (module, event, data) { return _this.handleModuleEvent(module, event, data); };
        global.callJS = function (message) { return _this.callJS(message); };
        return _this;
    }
    RuntimeNative.prototype.isAndroid = function () {
        return isAndroid;
    };
    RuntimeNative.prototype.callNativeInternal = function (data) {
        // android
        if (isAndroid) {
            JSRuntimeCallNative(JSON.stringify(data));
        }
        // ios
        else {
            JSRuntime.callNative(global.JSB_UUID, JSON.stringify(data));
        }
    };
    RuntimeNative.prototype.callNativeInternalSync = function (data) {
        return JSRuntime.callNativeSync(JSON.stringify(data));
    };
    return RuntimeNative;
}(native_1.Native));
var native = new RuntimeNative();
exports.nativeEvent = native.nativeEvent;
native_1.setNativeImplement(native);
