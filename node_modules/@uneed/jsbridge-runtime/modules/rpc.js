"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.RPC = void 0;
var native_1 = require("../native");
var RPCModule = /** @class */ (function (_super) {
    __extends(RPCModule, _super);
    function RPCModule() {
        var _this = _super.call(this) || this;
        _this.EC_ID_ERROR = 601;
        _this.EC_METHOD_ERROR = 601;
        _this.EC_METHOD_EXEC_ERROR = 602;
        _this.EC_METHOD_TIMEOUT = 603;
        _this.on('request', function (req) { return _this.onRequest(req); });
        _this.on('response', function (resp) { return _this.onResponse(resp); });
        return _this;
    }
    RPCModule.prototype.register = function (id, method) {
        this.id = id;
        this.method = method;
        this.native.callNativeFlat('RPC', 'register', { id: id });
    };
    RPCModule.prototype.request = function (id, params) {
        var _this = this;
        this.native.callNativeFlat('RPC', 'request', { reqId: id, respId: this.id, params: params });
        return new Promise(function (resolve, reject) {
            _this.requestPromise = {
                resolve: resolve,
                reject: reject,
            };
        });
    };
    RPCModule.prototype.response = function (id, result) {
        this.native.callNativeFlat('RPC', 'response', { reqId: id, respId: this.id, result: result });
    };
    RPCModule.prototype.onRequest = function (req) {
        var _this = this;
        var reqId = req.reqId;
        var respId = req.respId;
        if (reqId != this.id) {
            this.response(respId, {
                ec: this.EC_ID_ERROR,
            });
            return;
        }
        if (!this.method || typeof this.method !== 'function') {
            this.response(reqId, {
                ec: this.EC_METHOD_ERROR,
            });
            return;
        }
        var hasResponse = false;
        var handleResponse = function (ec, result) {
            if (hasResponse) {
                return;
            }
            hasResponse = true;
            _this.response(respId, {
                ec: 200,
                data: result,
            });
        };
        try {
            var result = this.method(req.params);
            Promise.resolve(result)
                .then(function (result) {
                handleResponse(200, result);
            })
                .catch(function (error) {
                handleResponse(_this.EC_METHOD_ERROR);
            });
            setTimeout(function () {
                handleResponse(_this.EC_METHOD_TIMEOUT);
            }, 5000);
        }
        catch (error) {
            handleResponse(this.EC_METHOD_EXEC_ERROR);
        }
    };
    RPCModule.prototype.onResponse = function (resp) {
        var reqId = resp.reqId;
        var respId = resp.respId;
        if (reqId != this.id) {
            return;
        }
        var result = resp.result;
        if (result.ec == 200) {
            this.requestPromise.resolve(result.data);
        }
        else {
            this.requestPromise.reject(result.ec);
        }
    };
    return RPCModule;
}(native_1.ModuleBase));
exports.RPC = new RPCModule();
native_1.addJSModule('RPC', exports.RPC);
